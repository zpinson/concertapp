{"ast":null,"code":"var db = require(\"../models\"); // Defining methods for the bookController\n\n\nmodule.exports = {\n  findAll: function findAll(req, res) {\n    db.Event.find(req.query).sort({\n      date: -1\n    }).then(function (dbModel) {\n      return res.json(dbModel);\n    }).catch(function (err) {\n      return res.status(422).json(err);\n    });\n  },\n  findById: function findById(req, res) {\n    db.Event.findById(req.params.id).then(function (dbModel) {\n      return res.json(dbModel);\n    }).catch(function (err) {\n      return res.status(422).json(err);\n    });\n  },\n  create: function create(req, res) {\n    db.Event.create(req.body).then(function (dbModel) {\n      return res.json(dbModel);\n    }).catch(function (err) {\n      return res.status(422).json(err);\n    });\n  },\n  update: function update(req, res) {\n    db.Event.findOneAndUpdate({\n      _id: req.params.id\n    }, req.body).then(function (dbModel) {\n      return res.json(dbModel);\n    }).catch(function (err) {\n      return res.status(422).json(err);\n    });\n  },\n  remove: function remove(req, res) {\n    db.Event.findById({\n      _id: req.params.id\n    }).then(function (dbModel) {\n      return dbModel.remove();\n    }).then(function (dbModel) {\n      return res.json(dbModel);\n    }).catch(function (err) {\n      return res.status(422).json(err);\n    });\n  }\n};","map":{"version":3,"sources":["/Users/Dave/Bootcamp/Projects/concertapp/controllers/eventController.js"],"names":["db","require","module","exports","findAll","req","res","Event","find","query","sort","date","then","dbModel","json","catch","err","status","findById","params","id","create","body","update","findOneAndUpdate","_id","remove"],"mappings":"AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,WAAD,CAAlB,C,CAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,OAAO,EAAE,iBAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC3BN,IAAAA,EAAE,CAACO,KAAH,CAASC,IAAT,CAAcH,GAAG,CAACI,KAAlB,EACGC,IADH,CACQ;AAAEC,MAAAA,IAAI,EAAE,CAAC;AAAT,KADR,EAEGC,IAFH,CAEQ,UAACC,OAAD;AAAA,aAAaP,GAAG,CAACQ,IAAJ,CAASD,OAAT,CAAb;AAAA,KAFR,EAGGE,KAHH,CAGS,UAACC,GAAD;AAAA,aAASV,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqBE,GAArB,CAAT;AAAA,KAHT;AAID,GANc;AAOfE,EAAAA,QAAQ,EAAE,kBAAUb,GAAV,EAAeC,GAAf,EAAoB;AAC5BN,IAAAA,EAAE,CAACO,KAAH,CAASW,QAAT,CAAkBb,GAAG,CAACc,MAAJ,CAAWC,EAA7B,EACGR,IADH,CACQ,UAACC,OAAD;AAAA,aAAaP,GAAG,CAACQ,IAAJ,CAASD,OAAT,CAAb;AAAA,KADR,EAEGE,KAFH,CAES,UAACC,GAAD;AAAA,aAASV,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqBE,GAArB,CAAT;AAAA,KAFT;AAGD,GAXc;AAYfK,EAAAA,MAAM,EAAE,gBAAUhB,GAAV,EAAeC,GAAf,EAAoB;AAC1BN,IAAAA,EAAE,CAACO,KAAH,CAASc,MAAT,CAAgBhB,GAAG,CAACiB,IAApB,EACGV,IADH,CACQ,UAACC,OAAD;AAAA,aAAaP,GAAG,CAACQ,IAAJ,CAASD,OAAT,CAAb;AAAA,KADR,EAEGE,KAFH,CAES,UAACC,GAAD;AAAA,aAASV,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqBE,GAArB,CAAT;AAAA,KAFT;AAGD,GAhBc;AAiBfO,EAAAA,MAAM,EAAE,gBAAUlB,GAAV,EAAeC,GAAf,EAAoB;AAC1BN,IAAAA,EAAE,CAACO,KAAH,CAASiB,gBAAT,CAA0B;AAAEC,MAAAA,GAAG,EAAEpB,GAAG,CAACc,MAAJ,CAAWC;AAAlB,KAA1B,EAAkDf,GAAG,CAACiB,IAAtD,EACGV,IADH,CACQ,UAACC,OAAD;AAAA,aAAaP,GAAG,CAACQ,IAAJ,CAASD,OAAT,CAAb;AAAA,KADR,EAEGE,KAFH,CAES,UAACC,GAAD;AAAA,aAASV,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqBE,GAArB,CAAT;AAAA,KAFT;AAGD,GArBc;AAsBfU,EAAAA,MAAM,EAAE,gBAAUrB,GAAV,EAAeC,GAAf,EAAoB;AAC1BN,IAAAA,EAAE,CAACO,KAAH,CAASW,QAAT,CAAkB;AAAEO,MAAAA,GAAG,EAAEpB,GAAG,CAACc,MAAJ,CAAWC;AAAlB,KAAlB,EACGR,IADH,CACQ,UAACC,OAAD;AAAA,aAAaA,OAAO,CAACa,MAAR,EAAb;AAAA,KADR,EAEGd,IAFH,CAEQ,UAACC,OAAD;AAAA,aAAaP,GAAG,CAACQ,IAAJ,CAASD,OAAT,CAAb;AAAA,KAFR,EAGGE,KAHH,CAGS,UAACC,GAAD;AAAA,aAASV,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqBE,GAArB,CAAT;AAAA,KAHT;AAID;AA3Bc,CAAjB","sourcesContent":["const db = require(\"../models\");\n\n// Defining methods for the bookController\nmodule.exports = {\n  findAll: function (req, res) {\n    db.Event.find(req.query)\n      .sort({ date: -1 })\n      .then((dbModel) => res.json(dbModel))\n      .catch((err) => res.status(422).json(err));\n  },\n  findById: function (req, res) {\n    db.Event.findById(req.params.id)\n      .then((dbModel) => res.json(dbModel))\n      .catch((err) => res.status(422).json(err));\n  },\n  create: function (req, res) {\n    db.Event.create(req.body)\n      .then((dbModel) => res.json(dbModel))\n      .catch((err) => res.status(422).json(err));\n  },\n  update: function (req, res) {\n    db.Event.findOneAndUpdate({ _id: req.params.id }, req.body)\n      .then((dbModel) => res.json(dbModel))\n      .catch((err) => res.status(422).json(err));\n  },\n  remove: function (req, res) {\n    db.Event.findById({ _id: req.params.id })\n      .then((dbModel) => dbModel.remove())\n      .then((dbModel) => res.json(dbModel))\n      .catch((err) => res.status(422).json(err));\n  },\n};\n"]},"metadata":{},"sourceType":"script"}